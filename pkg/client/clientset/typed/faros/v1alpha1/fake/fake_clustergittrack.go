/*
Copyright 2018 Pusher Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/pusher/faros/pkg/apis/faros/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeClusterGitTracks implements ClusterGitTrackInterface
type FakeClusterGitTracks struct {
	Fake *FakeFarosV1alpha1
}

var clustergittracksResource = schema.GroupVersionResource{Group: "faros.pusher.com", Version: "v1alpha1", Resource: "clustergittracks"}

var clustergittracksKind = schema.GroupVersionKind{Group: "faros.pusher.com", Version: "v1alpha1", Kind: "ClusterGitTrack"}

// Get takes name of the clusterGitTrack, and returns the corresponding clusterGitTrack object, and an error if there is any.
func (c *FakeClusterGitTracks) Get(name string, options v1.GetOptions) (result *v1alpha1.ClusterGitTrack, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(clustergittracksResource, name), &v1alpha1.ClusterGitTrack{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterGitTrack), err
}

// List takes label and field selectors, and returns the list of ClusterGitTracks that match those selectors.
func (c *FakeClusterGitTracks) List(opts v1.ListOptions) (result *v1alpha1.ClusterGitTrackList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(clustergittracksResource, clustergittracksKind, opts), &v1alpha1.ClusterGitTrackList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ClusterGitTrackList{ListMeta: obj.(*v1alpha1.ClusterGitTrackList).ListMeta}
	for _, item := range obj.(*v1alpha1.ClusterGitTrackList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested clusterGitTracks.
func (c *FakeClusterGitTracks) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(clustergittracksResource, opts))
}

// Create takes the representation of a clusterGitTrack and creates it.  Returns the server's representation of the clusterGitTrack, and an error, if there is any.
func (c *FakeClusterGitTracks) Create(clusterGitTrack *v1alpha1.ClusterGitTrack) (result *v1alpha1.ClusterGitTrack, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(clustergittracksResource, clusterGitTrack), &v1alpha1.ClusterGitTrack{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterGitTrack), err
}

// Update takes the representation of a clusterGitTrack and updates it. Returns the server's representation of the clusterGitTrack, and an error, if there is any.
func (c *FakeClusterGitTracks) Update(clusterGitTrack *v1alpha1.ClusterGitTrack) (result *v1alpha1.ClusterGitTrack, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(clustergittracksResource, clusterGitTrack), &v1alpha1.ClusterGitTrack{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterGitTrack), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeClusterGitTracks) UpdateStatus(clusterGitTrack *v1alpha1.ClusterGitTrack) (*v1alpha1.ClusterGitTrack, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(clustergittracksResource, "status", clusterGitTrack), &v1alpha1.ClusterGitTrack{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterGitTrack), err
}

// Delete takes name of the clusterGitTrack and deletes it. Returns an error if one occurs.
func (c *FakeClusterGitTracks) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(clustergittracksResource, name), &v1alpha1.ClusterGitTrack{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeClusterGitTracks) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(clustergittracksResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.ClusterGitTrackList{})
	return err
}

// Patch applies the patch and returns the patched clusterGitTrack.
func (c *FakeClusterGitTracks) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterGitTrack, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(clustergittracksResource, name, pt, data, subresources...), &v1alpha1.ClusterGitTrack{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterGitTrack), err
}
